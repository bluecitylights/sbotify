name: Deploy

on:
  workflow_call:
    inputs:
      service:
        required: true
        type: string
      image:
        required: true
        type: string
    secrets:
      WORKLOAD_IDENTITY_PROVIDER:
        required: true
      SERVICE_ACCOUNT_EMAIL:
        required: true
      GCP_PROJECT:
        required: true
      REGION:
        required: true
      APP:
        required: true
      PROJECT_NUMBER:
        required: true
      GEMINI_API_KEY:
        required: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}
      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
      - name: Deploy to Cloud Run
        run: |
          # Try to get image URL from job output first
          IMAGE_FROM_OUTPUT="${{ inputs.image }}"
          
          # If that's empty, construct it from the commit SHA
          if [ -z "$IMAGE_FROM_OUTPUT" ]; then
            echo "‚ö†Ô∏è  WARNING: Image input is empty, constructing URL from commit SHA"
            IMAGE_URL="${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/${{ secrets.APP }}/${{ inputs.service }}:${{ github.sha }}"
            echo "üîß Constructed image URL: $IMAGE_URL"
          else
            IMAGE_URL="$IMAGE_FROM_OUTPUT"
            echo "‚úÖ Using image URL from output: $IMAGE_URL"
          fi
          
          # Verify the image URL is not empty
          if [ -z "$IMAGE_URL" ]; then
            echo "‚ùå ERROR: Could not determine image URL!"
            exit 1
          fi
          
          # Define the service name
          SERVICE_NAME="${{ secrets.APP }}-${{ inputs.service }}"
          echo "üöÄ Deploying service: $SERVICE_NAME"
          echo "üê≥ Using image: ${{ inputs.image }}"
          
          # Initialize array with flags only (not the service name or image)
          deploy_flags=(
            "--region=${{ secrets.REGION }}"
            "--max-instances=1"
            "--platform=managed"
            "--service-account=${{ secrets.APP }}-${{ inputs.service }}-user@${{ secrets.GCP_PROJECT }}.iam.gserviceaccount.com"
            "--no-allow-unauthenticated"
            "--ingress=internal"
          )

          # Add service-specific environment variables
          if [ "${{ inputs.service }}" == "chat" ]; then
            deploy_flags+=(
              "--update-env-vars=GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}"
              "--update-env-vars=MCP_SERVER_URL_GCP=https://${{ secrets.APP }}-mcp-server-${{ secrets.PROJECT_NUMBER }}.${{ secrets.REGION }}.run.app"
            )
          fi

          if [ "${{ inputs.service }}" == "dashboard" ]; then
            deploy_flags+=(
              "--update-env-vars=CHAT_API_URL=https://${{ secrets.APP }}-chat-${{ secrets.PROJECT_NUMBER }}.${{ secrets.REGION }}.run.app"
            )
          fi

          # Deploy with service name as separate argument
          gcloud run deploy "$SERVICE_NAME" "${deploy_flags[@]}" --image="$IMAGE_URL"